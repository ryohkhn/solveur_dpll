                      Mini-projet 1 : solveur DPLL récursif
                             fichier RENDU
                       (à remplir obligatoirement)

**Un mini-projet sans fichier RENDU rempli ne recevra pas de note.**

Date limite: 28 octobre 2022, 23h59

Identité
--------
Nombre de binôme: 10
Nom, prénom 1: MARTINEAU, Clément
Nom, prénom 2: RODRIGUEZ, Lucas


Questions sur votre code
------------------------
0. Avez-vous testé que `make dpll` s'exécute sans erreurs ou warnings,
   et que ensuite `./dpll sudoku-4x4.cnf` donne la réponse attendue (voir
   fichier README) ?


Oui, le fichier compile sans avertissement. La réponse attendue est obtenue.

---

1. Avez-vous utilisé la fonction `filter_map` (donné dans dpll.ml)
   dans votre implémentation de `simplifie` ? 
   - Si oui, expliquez en quelques phrases en français comment vous
     l'avez utilisée.
   - Si non, expliquez en quelques phrases en français comment
     fonctionne votre implémentation de `simplifie`.


Nous avons utilisé la fonction `filter_map` deux fois dans notre implémentation de `simplifie`.
Première utilisation avec le filtre `isX`, qui renvoie une copie d'une liste ne contenant pas le littéral `l`.
Deuxieme utilisation avec le filtre `isNotX` qui renvoie une copie d'une liste en supprimant les litteraux correspondants a `not(l)`.

---

2. Pour l'implémentation de `unitaire`, quelles sont les fonctions
   auxiliaires que vous avez utilisées et/ou écrites ? (Par une
   fonction auxiliaire, on entend ici soit une fonction d'une
   bibliothèque, par exemple des fonctions comme `List.length`,
   `List.rev_append`, ou une fonction `aux_unitaire` que vous avez
   écrite vous-mêmes.) Expliquez en quelques phrases en français
   comment ces fonctions auxiliaires sont utilisées dans votre
   implémentation de la fonction `unitaire`.


Nous n'utilisons pas de fonction auxiliaire pour l'implémentation de `unitaire`.
La fonction effectue un parcours de la liste. Si l'élément est seul dans sa sous-liste il est retourné, sinon la fonction est appellée récursivement sur la suite de la liste.

---

3. Pour l'implémentation de `pur`, quelles sont les fonctions
   auxiliaires que vous avez utilisées et/ou écrites ?  Expliquez en
   quelques phrases en français comment ces fonctions auxiliaires sont
   utilisées dans votre implémentation de la fonction `pur`.


Nous avons écrit trois fonctions auxiliaires à la fonction `pur`, `pur_aux` et `pur_aux_2` qui lui sont internes et une troisième fonction `pur_parcours`.
La première fonction auxiliaire effectue le parcours de liste en liste et appelle la fonction `pur_aux_2` sur chaque sous-liste.
La seconde parcourt la sous-liste en argument et fait l'appel à `pur_parcours` sur chacun de ses éléments.
Cette troisième fonction auxiliaire utilise la fonction `List.mem` sur l'inverse de l'élément en argument et return cette valeur si elle est pure.

---

4. Donnez un exemple d'une formule pour laquelle les deux fonctions
   `solveur_split` et `solveur_dpll_rec` ont un comportement
   différent, et expliquez les différences entre ces deux fonctions.


Nous pouvons utiliser l'exemple suivant : `clauses` = [[1;4;2];[4];[4;8;-2;-5];[4;-1];[-2;-3]]
Les résultats sont les suivants :
-solveur_dpll_rec -> SAT -3 4 0
-solveur_split    -> SAT  1 -2 4 0

Les différences entre ces deux fonctions viennent du fait que `solveur_split` n'utilise pas les règles `unitaire` et `pure`. Il résout un problème SAT en essayant récursivement des interprétations jusqu'à en trouver une bonne.
Au contraire, `solveur_dpll_rec` utilise ces règles, ce qui est beaucoup plus efficace.

---

5. Avez-vous d'autres remarques sur votre rendu ? (question optionnelle)

**à remplir**

---

--fin du fichier RENDU--
